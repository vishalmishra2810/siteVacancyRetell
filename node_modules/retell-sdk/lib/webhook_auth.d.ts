declare function makeSecureWebhooks(getSigner: (secretOrPrivateKey: string) => (input: string) => string, getVerifier: (secretOrPublicKey: string) => (input: string, digest: string) => boolean): {
    sign(input: string, secretOrPrivateKey: string, timestamp?: number): string;
    verify(input: string, secret: string, signature: string, opts?: {
        timeout?: number;
        timestamp?: number;
    }): boolean;
};
export type SecureWebhooks = ReturnType<typeof makeSecureWebhooks>;
export declare const symmetric: {
    sign(input: string, secretOrPrivateKey: string, timestamp?: number): string;
    verify(input: string, secret: string, signature: string, opts?: {
        timeout?: number;
        timestamp?: number;
    }): boolean;
};
export declare const asymmetric: {
    sign(input: string, secretOrPrivateKey: string, timestamp?: number): string;
    verify(input: string, secret: string, signature: string, opts?: {
        timeout?: number;
        timestamp?: number;
    }): boolean;
};
export declare const combined: SecureWebhooks;
export declare const verify: (body: string, apiKey: string, signature: string) => boolean;
export declare const sign: (body: string, apiKey: string) => string;
export {};
//# sourceMappingURL=webhook_auth.d.ts.map