// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _a;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { Agent as AgentAPIAgent, } from "./resources/agent.mjs";
import { BatchCall } from "./resources/batch-call.mjs";
import { Call, } from "./resources/call.mjs";
import { Concurrency } from "./resources/concurrency.mjs";
import { KnowledgeBase, } from "./resources/knowledge-base.mjs";
import { Llm } from "./resources/llm.mjs";
import { PhoneNumber, } from "./resources/phone-number.mjs";
import { Voice } from "./resources/voice.mjs";
import * as Webhooks from 'retell-sdk/lib/webhook_auth';
/**
 * API Client for interfacing with the Retell API.
 */
export class Retell extends Core.APIClient {
    /**
     * API Client for interfacing with the Retell API.
     *
     * @param {string} opts.apiKey
     * @param {string} [opts.baseURL=process.env['RETELL_BASE_URL'] ?? https://api.retellai.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('RETELL_BASE_URL'), apiKey, ...opts }) {
        if (apiKey === undefined) {
            throw new Errors.RetellError("Missing required client option apiKey; you need to instantiate the Retell client with an apiKey option, like new Retell({ apiKey: 'YOUR_RETELL_API_KEY' }).");
        }
        const options = {
            apiKey,
            ...opts,
            baseURL: baseURL || `https://api.retellai.com`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.call = new API.Call(this);
        this.phoneNumber = new API.PhoneNumber(this);
        this.agent = new API.Agent(this);
        this.llm = new API.Llm(this);
        this.knowledgeBase = new API.KnowledgeBase(this);
        this.voice = new API.Voice(this);
        this.concurrency = new API.Concurrency(this);
        this.batchCall = new API.BatchCall(this);
        this._options = options;
        this.apiKey = apiKey;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.apiKey}` };
    }
}
_a = Retell;
Retell.Retell = _a;
Retell.DEFAULT_TIMEOUT = 60000; // 1 minute
Retell.RetellError = Errors.RetellError;
Retell.APIError = Errors.APIError;
Retell.APIConnectionError = Errors.APIConnectionError;
Retell.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Retell.APIUserAbortError = Errors.APIUserAbortError;
Retell.NotFoundError = Errors.NotFoundError;
Retell.ConflictError = Errors.ConflictError;
Retell.RateLimitError = Errors.RateLimitError;
Retell.BadRequestError = Errors.BadRequestError;
Retell.AuthenticationError = Errors.AuthenticationError;
Retell.InternalServerError = Errors.InternalServerError;
Retell.PermissionDeniedError = Errors.PermissionDeniedError;
Retell.UnprocessableEntityError = Errors.UnprocessableEntityError;
Retell.toFile = Uploads.toFile;
Retell.fileFromPath = Uploads.fileFromPath;
Retell.verify = Webhooks.verify;
Retell.sign = Webhooks.sign;
Retell.Call = Call;
Retell.PhoneNumber = PhoneNumber;
Retell.Agent = AgentAPIAgent;
Retell.Llm = Llm;
Retell.KnowledgeBase = KnowledgeBase;
Retell.Voice = Voice;
Retell.Concurrency = Concurrency;
Retell.BatchCall = BatchCall;
export { toFile, fileFromPath } from "./uploads.mjs";
export { RetellError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export default Retell;
//# sourceMappingURL=index.mjs.map